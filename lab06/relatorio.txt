João Gabriel da Cunha Vasconcellos 2211302

1) 
Abra duas seções de terminais
l Na primeira, execute um programa que fica em
loop lendo de uma FIFO para depois escrever na
saída padrão (tela)
l Na segunda, execute um programa que fica lendo
da entrada padrão (teclado) e depois escreve na
mesma FIFO 

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() 
{
    int fifo;
    char buffer[100];
    
    fifo = open("minhaFifo", O_RDONLY);
    if (fifo < 0) 
    {
        perror("Erro ao abrir FIFO para leitura");
        return 1;
    }

    printf("Esperando por dados...\n");
    while (read(fifo, buffer, sizeof(buffer)) > 0) 
    {
        printf("Recebido: %s\n", buffer);
    }

    close(fifo);
    return 0;
}



#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

int main() 
{
    int fifo;
    char mensagem[100];

    fifo = open("minhaFifo", O_WRONLY);
    if (fifo < 0) 
    {
        perror("Erro ao abrir FIFO para escrita");
        return 1;
    }

    printf("Digite uma mensagem para enviar: ");
    while (fgets(mensagem, sizeof(mensagem), stdin) != NULL) {
        write(fifo, mensagem, strlen(mensagem) + 1);
    }

    close(fifo);
    return 0;
}


gcc -o ex1prog1 ex1prog1.c

gcc -o ex2prog2 ex2prog2.c

Entrada: Jiu-jitsu é um esporte interessante.
Saída no outro temrinal: Jiu-jitsu é um esporte interessante.


Conclusão : Usei no terminal1 o comando "mkfifo minhaFifo" O prog2 do terminal 2 recebe os dados do teclado, escreve na FIFO e o prog1 no terminal 1 
lê os dados da FIFO e exibe no terminal 1.


2)
Escreva um programa que primeiro cria
uma FIFO e em seguida cria dois processos
filho que escrevem uma string na FIFO.
O pai dá um waitpid em seguida lê as
strings desse FIFO e exibe na tela


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <string.h>

#define FIFO_NAME "minhaFifo"

int main() {
    // Cria a FIFO se ela ainda não existir
    if (mkfifo(FIFO_NAME, 0666) == -1)
    {
        perror("Erro ao criar FIFO");
        exit(EXIT_FAILURE);
    }

    // Cria dois processos filhos
    pid_t pid1 = fork();
    if (pid1 == 0) 
    {
        // Primeiro processo filho
        int fifo = open(FIFO_NAME, O_WRONLY);
        char mensagem1[] = "Mensagem do filho 1\n";
        write(fifo, mensagem1, strlen(mensagem1));
        close(fifo);
        exit(0);
    }

    pid_t pid2 = fork();
    if (pid2 == 0) 
    {
        // Segundo processo filho
        int fifo = open(FIFO_NAME, O_WRONLY);
        char mensagem2[] = "Mensagem do filho 2\n";
        write(fifo, mensagem2, strlen(mensagem2));
        close(fifo);
        exit(0);
    }

    // Processo pai: espera pelos filhos
    waitpid(pid1, NULL, 0);
    waitpid(pid2, NULL, 0);

    // Processo pai lê as mensagens da FIFO
    int fifo = open(FIFO_NAME, O_RDONLY);
    char buffer[128];
    while (read(fifo, buffer, sizeof(buffer)) > 0) 
    {
        printf("Mensagem recebida: %s", buffer);
    }
    close(fifo);

    // Remove a FIFO após o uso
    unlink(FIFO_NAME);
    return 0;
}


gcc -o ex2 ex2.c 


Mensagem recebida: Olá mundo 1
Mensagem recebida: Olá mundo 2

Aconteceu tudo como previsto no  enunciado, ou processo pai leu as mensagens dos filhos
e exibiu no terminal.


 3)
 Escreva um servidor e um cliente usando duas
FIFOs: uma para enviar strings para o servidor,
e outra para transmitir as respostas de volta
para os clientes. O servidor deverá rodar em
background e transformar cada palavra
recebida de minusculas para maiúsculas.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

#define FIFO_SERVIDOR "fifo_servidor"
#define FIFO_CLIENTE "fifo_cliente"

int main() 
{
    char mensagem[100];
    char buffer[100];
    int servidor_fifo, cliente_fifo;

    // Abre as FIFOs para leitura e escrita
    servidor_fifo = open(FIFO_SERVIDOR, O_WRONLY);
    cliente_fifo = open(FIFO_CLIENTE, O_RDONLY);

    if (servidor_fifo < 0 || cliente_fifo < 0)
    {
        perror("Erro ao abrir as FIFOs");
        exit(EXIT_FAILURE);
    }

    printf("Digite uma mensagem para enviar ao servidor: ");
    fgets(mensagem, sizeof(mensagem), stdin);

    // Envia a mensagem para o servidor
    write(servidor_fifo, mensagem, strlen(mensagem) + 1);

    // Aguarda a resposta do servidor
    if (read(cliente_fifo, buffer, sizeof(buffer)) > 0) 
    {
        printf("Resposta do servidor: %s\n", buffer);
    }

    close(servidor_fifo);
    close(cliente_fifo);
    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/stat.h>

#define FIFO_SERVIDOR "fifo_servidor"
#define FIFO_CLIENTE "fifo_cliente"

void to_uppercase(char *str)
 {
    for (int i = 0; str[i]; i++)
    {
        str[i] = toupper(str[i]);
    }
}

int main() {
    char buffer[100];
    int servidor_fifo, cliente_fifo;

    // Abre as FIFOs para leitura e escrita
    servidor_fifo = open(FIFO_SERVIDOR, O_RDONLY);
    cliente_fifo = open(FIFO_CLIENTE, O_WRONLY);

    if (servidor_fifo < 0 || cliente_fifo < 0) {
        perror("Erro ao abrir as FIFOs");
        exit(EXIT_FAILURE);
    }

    printf("Servidor rodando em background...\n");

    // Loop infinito para processar mensagens dos clientes
    while (1) {
        if (read(servidor_fifo, buffer, sizeof(buffer)) > 0) {
            printf("Mensagem recebida do cliente: %s", buffer);
            to_uppercase(buffer); // Converte para maiúsculas
            write(cliente_fifo, buffer, strlen(buffer) + 1);
        }
    }

    close(servidor_fifo);
    close(cliente_fifo);
    return 0;
}

gcc -o ex3cliente ex3cliente.c

gcc -o ex3servidor ex3servidor.c

Digite uma mensagem para enviar ao servidor: Oi Amigo!
Resposta do servidor: OI AMIGO!


Escrevi a mensagem no terminal Cliente ola amigo! e ele me retornou OLA AMIGO! como previsto no enunciado.






