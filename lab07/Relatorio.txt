1)  Execute o programa dado (exemplo de uso
de semáforos) e explique sua execução. 

#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

union semun {
    int val;
    struct semid_ds *buf;
    ushort *array;
};

// Função para inicializar o valor do semáforo
int setSemValue(int semId) {
    union semun semUnion;
    semUnion.val = 1;
    return semctl(semId, 0, SETVAL, semUnion);
}

// Função para remover o semáforo
void delSemValue(int semId) {
    union semun semUnion;
    semctl(semId, 0, IPC_RMID, semUnion);
}

// Operação P (down)
int semaforoP(int semId) {
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = -1;  // P (decrementa o semáforo)
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
    return 0;
}

// Operação V (up)
int semaforoV(int semId) {
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = 1;  // V (incrementa o semáforo)
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
    return 0;
}

int main(int argc, char *argv[]) {
    int i;
    char letra = 'o';
    int semId;

    // Verifica se o semáforo já foi criado
    if (argc > 1) {
        semId = semget(8752, 1, 0666 | IPC_CREAT); // Cria o semáforo
        setSemValue(semId);
        letra = 'x';
        sleep(2);
    } else {
        while ((semId = semget(8752, 1, 0666)) < 0) {
            putchar('.'); fflush(stdout);
            sleep(1);
        }
    }

    // Executa 10 loops com operação P e V
    for (i = 0; i < 10; i++) {
        semaforoP(semId);  // Entra na região crítica
        putchar(toupper(letra)); fflush(stdout);
        sleep(rand() % 3); // Simula trabalho na região crítica
        putchar(letra); fflush(stdout);
        semaforoV(semId);  // Sai da região crítica
        sleep(rand() % 2);
    }

    printf("\nProcesso %d terminou\n", getpid());

    // Se o semáforo foi criado por este processo, remove-o
    if (argc > 1) {
        sleep(10);
        delSemValue(semId);
    }

    return 0;
}


 gcc -o ex1 ex1.c

 ./ex1 &     
./ex1 1


OoOoXOxXxoXOoxOoXO^C
cunha@cunha-desktop:~/inf1316/lab7$ ^C
cunha@cunha-desktop:~/inf1316/lab7$ ^C
cunha@cunha-desktop:~/inf1316/lab7$ oOoOoOoOo
Processo 5646 terminou

 O comportamento de alternância entre as letras "X" e "O" ocorre por causa da sincronização 
 entre os dois processos usando o semáforo. O semáforo está controlando o acesso à região crítica, ou seja, 
 a parte do código onde cada processo imprime uma letra na tela.


2) Produtor-Consumidor
    Escreva um programa formado por dois
processos concorrentes, leitor e impressor, que
usam memória compartilhada executando um
loop infinito. Para sincronizar as suas ações, eles
fazem uso de semáforos.
    O processo leitor fica lendo caracteres da entrada
padrão e colocando em um buffer de 16 posições.
Quando o buffer está cheio o processo impressor
deve imprimi-lo na saída padrão. 


#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <unistd.h>
#include <string.h>
#include <sys/ipc.h>

// Definindo o tamanho do buffer
#define BUFFER_SIZE 16

// Estrutura para o buffer compartilhado
struct shared_memory 
{
    char buffer[BUFFER_SIZE];
    int count;  // Contador de caracteres no buffer
};

// Funções de operação no semáforo
void semaforoP(int semId) 
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
}

void semaforoV(int semId) 
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
}

// Função para criar memória compartilhada
struct shared_memory* criar_memoria_compartilhada(int* shmId) 
{
    *shmId = shmget(IPC_PRIVATE, sizeof(struct shared_memory), 0666 | IPC_CREAT);
    if (*shmId == -1) 
    {
        perror("Falha ao criar memória compartilhada");
        exit(1);
    }
    return (struct shared_memory*) shmat(*shmId, NULL, 0);
}

// Função para remover memória compartilhada
void remover_memoria_compartilhada(int shmId)
 {
    shmctl(shmId, IPC_RMID, NULL);
}

int main() 
{
    int shmId, semId;
    struct shared_memory *shm;

    // Criando semáforo para controlar o buffer
    semId = semget(IPC_PRIVATE, 1, 0666 | IPC_CREAT);
    semctl(semId, 0, SETVAL, 1);  // Inicializando semáforo

    // Criando memória compartilhada
    shm = criar_memoria_compartilhada(&shmId);
    shm->count = 0;  // Inicializando o contador do buffer

    // Criando o processo concorrente
    pid_t pid = fork();

    if (pid == 0) {  // Processo filho - Impressora (Consumidor)
        while (1) 
        {
            semaforoP(semId);  // Acessa a memória compartilhada
            if (shm->count == BUFFER_SIZE) 
            {
                printf("Buffer cheio. Imprimindo: ");
                for (int i = 0; i < BUFFER_SIZE; i++) 
                {
                    putchar(shm->buffer[i]);
                }
                putchar('\n');
                shm->count = 0;  // Esvazia o buffer
            }
            semaforoV(semId);  // Libera o semáforo
            sleep(1);
        }
    } else {  // Processo pai - Leitor (Produtor)
        while (1) 
        {
            semaforoP(semId);  // Acessa a memória compartilhada
            if (shm->count < BUFFER_SIZE)
             {
                printf("Digite um caractere: ");
                char c = getchar();
                shm->buffer[shm->count] = c;
                shm->count++;
            }
            semaforoV(semId);  // Libera o semáforo
            sleep(1);
        }

        wait(NULL);  // Espera o processo filho terminar
        remover_memoria_compartilhada(shmId);
    }

    return 0;
}


gcc -o ex2 ex2.c   

./ex2

Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2
Digite um caractere: 2

2222222222222222

O programa lê em loop caracteres do teclado e enche o buffer, quando as 16 posições do buffer enchem, ele imprime
os caracteres e limpa o buffer.


3) Faça programas para alterar um valor de
uma variável na memória compartilhada.
Um programa soma 1 à variável e o outro
soma 5 à variável. Utilize semáforos para
alterar a variável (região crítica). 


#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/wait.h>

// Funções de operação no semáforo
void semaforoP(int semId) 
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
}

void semaforoV(int semId)
 {
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
}

// Função para criar memória compartilhada
int* criar_memoria_compartilhada(int* shmId) 
{
    *shmId = shmget(IPC_PRIVATE, sizeof(int), 0666 | IPC_CREAT);
    if (*shmId == -1) {
        perror("Falha ao criar memória compartilhada");
        exit(1);
    }
    return (int*) shmat(*shmId, NULL, 0);
}

// Função para remover memória compartilhada
void remover_memoria_compartilhada(int shmId) 
{
    shmctl(shmId, IPC_RMID, NULL);
}

int main() 
{
    int shmId, semId;
    int *shared_var;

    // Criando semáforo para controlar o acesso à variável
    semId = semget(IPC_PRIVATE, 1, 0666 | IPC_CREAT);
    semctl(semId, 0, SETVAL, 1);  // Inicializando semáforo

    // Criando memória compartilhada para a variável
    shared_var = criar_memoria_compartilhada(&shmId);
    *shared_var = 0;  // Inicializando a variável compartilhada

    // Criando dois processos concorrentes
    pid_t pid = fork();

    if (pid == 0) {  // Processo filho - soma 5
        while (1) {
            semaforoP(semId);  // Trava o semáforo
            *shared_var += 5;
            printf("Processo filho (soma 5): valor da variável = %d\n", *shared_var);
            semaforoV(semId);  // Libera o semáforo
            sleep(2);  // Espera 2 segundos antes de repetir
        }
    } else {  // Processo pai - soma 1
        while (1) {
            semaforoP(semId);  // Trava o semáforo
            *shared_var += 1;
            printf("Processo pai (soma 1): valor da variável = %d\n", *shared_var);
            semaforoV(semId);  // Libera o semáforo
            sleep(1);  // Espera 1 segundo antes de repetir
        }

        wait(NULL);  // Espera o processo filho terminar (o que nunca acontece nesse caso)
        remover_memoria_compartilhada(shmId);
    }

    return 0;
}

gcc -o ex3 ex3.c  
./ex3

Processo pai (soma 1): valor da variável = 1
Processo filho (soma 5): valor da variável = 6
Processo pai (soma 1): valor da variável = 7
Processo filho (soma 5): valor da variável = 12
Processo pai (soma 1): valor da variável = 13
Processo pai (soma 1): valor da variável = 14
Processo filho (soma 5): valor da variável = 19
Processo pai (soma 1): valor da variável = 20
Processo pai (soma 1): valor da variável = 21
Processo filho (soma 5): valor da variável = 26
Processo pai (soma 1): valor da variável = 27
Processo pai (soma 1): valor da variável = 28
Processo filho (soma 5): valor da variável = 33
Processo pai (soma 1): valor da variável = 34
Processo pai (soma 1): valor da variável = 35


O meu programa usa semáfatoras para alterar a soma das variáveis, a variável é a mesma mas através de semáforos 
eu sincronizei as somas para uma hora somar 1 e na outra 5 sem que haja conflito entre as operações.


4) Faça programas separados que utilizam a
memória compartilhada para trocar
mensagens. Utilize semáforos para
sincronizar a aplicação.

prog1:

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <unistd.h>
#include <string.h>
#include <sys/ipc.h>

// Estrutura da mensagem na memória compartilhada
struct shared_memory 
{
    char mensagem[100];
    int lida;  // Flag para indicar se a mensagem foi lida
};

// Funções de operação no semáforo
void semaforoP(int semId) 
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
}

void semaforoV(int semId) 
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
}

// Função para criar memória compartilhada
struct shared_memory* criar_memoria_compartilhada(int* shmId) 
{
    *shmId = shmget(1234, sizeof(struct shared_memory), 0666 | IPC_CREAT);
    if (*shmId == -1) {
        perror("Falha ao criar memória compartilhada");
        exit(1);
    }
    return (struct shared_memory*) shmat(*shmId, NULL, 0);
}

int main() 
{
    int shmId, semId;
    struct shared_memory *shm;

    // Criando semáforo para controlar a troca de mensagens
    semId = semget(1234, 1, 0666 | IPC_CREAT);
    semctl(semId, 0, SETVAL, 1);  // Inicializando semáforo

    // Criando memória compartilhada
    shm = criar_memoria_compartilhada(&shmId);
    shm->lida = 1;  // Inicializa o estado como "lida" para permitir o primeiro envio

    while (1) 
    {
        semaforoP(semId);  // Trava o semáforo para acessar a memória compartilhada

        if (shm->lida == 1) 
        {  // Se a mensagem anterior foi lida, enviar uma nova
            printf("Digite uma mensagem: ");
            fgets(shm->mensagem, 100, stdin);
            shm->lida = 0;  // Marca como não lida
        }

        semaforoV(semId);  // Libera o semáforo
        sleep(1);  // Aguarda 1 segundo antes de tentar enviar outra mensagem
    }

    return 0;
}

prog2: 

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <unistd.h>
#include <string.h>
#include <sys/ipc.h>

// Estrutura da mensagem na memória compartilhada
struct shared_memory 
{
    char mensagem[100];
    int lida;  // Flag para indicar se a mensagem foi lida
};

// Funções de operação no semáforo
void semaforoP(int semId) 
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
}

void semaforoV(int semId) 
{
    struct sembuf semB;
    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;
    semop(semId, &semB, 1);
}

// Função para conectar à memória compartilhada
struct shared_memory* conectar_memoria_compartilhada(int* shmId) 
{
    *shmId = shmget(1234, sizeof(struct shared_memory), 0666);
    if (*shmId == -1) {
        perror("Falha ao conectar à memória compartilhada");
        exit(1);
    }
    return (struct shared_memory*) shmat(*shmId, NULL, 0);
}

int main() 
{
    int shmId, semId;
    struct shared_memory *shm;

    // Conectando ao semáforo
    semId = semget(1234, 1, 0666);
    if (semId == -1) {
        perror("Falha ao conectar ao semáforo");
        exit(1);
    }

    // Conectando à memória compartilhada
    shm = conectar_memoria_compartilhada(&shmId);

    while (1) 
    {
        semaforoP(semId);  // Trava o semáforo para acessar a memória compartilhada

        if (shm->lida == 0) 
        {  // Se há uma mensagem nova, imprimi-la
            printf("Mensagem recebida: %s\n", shm->mensagem);
            shm->lida = 1;  // Marca a mensagem como lida
        }

        semaforoV(semId);  // Libera o semáforo
        sleep(1);  // Aguarda 1 segundo antes de verificar novamente
    }

    return 0;
}


gcc -o ex4prog1 ex4prog1.C

gcc -o ex4prog2 ex4prog2.C

./ex4prog1

./ex4prog2

Entrada:

Digite uma mensagem: Olá friend
Digite uma mensagem: Futebol é legal
Digite uma mensagem: e ^i*pi -1 =0


Mensagem recebida: Olá friend
Mensagem recebida: Futebol é legal
Mensagem recebida: e ^i*pi -1 =0



Usei as técncias de semáforos e memória compartilhada para sincronizar a troca de mensagens 
entre dois programas que executam paralelamente. Compilei e executei os dois em terminais diferentes.








