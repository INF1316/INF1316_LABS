### ALUNOS
Pedro Barizon       2211350
João Gabriel Cunha  2211302

# LABORATORIO 2 - Sistemas Operacionais

1) SOMA DE MATRIZES

Faça um programa para somar matrizes de acordo com o seguinte algoritmo:

* O primeiro processo irá criar duas matrizes preenchidas e uma terceira vazia
em 3 áreas de memória compartilhada.
* Para cada linha da matriz solução, o seu programa deverá gerar um processo
para o seu cálculo.

******************************** CODIGO FONTE ********************************
#include <stdio.h>      // perror
#include <stdlib.h>
#include <sys/ipc.h>    // Inter-Processs Communication
#include <sys/shm.h>    // Funcoes com prefixo "shm" (Shared Memory)
#include <sys/stat.h>   // Flags com sufixo USR
#include <sys/wait.h>   // waitpid
#include <unistd.h>     // fork

void exibeMatriz(int* matriz, int lin, int col);

int main(int argc, char* argv[])
{
    int status, pid, segmento[3], *matriz[3];
    int matAux1[9] = {5, 7, 9, 6, 3, 6, 3, 1, 2};
    int matAux2[9] = {5, 3, 0, 6, 2, 6, 5, 7, 0};
    int matAux3[9] = {0}; // Matriz resultante inicializada com 0
    int* matAux[3] = {matAux1, matAux2, matAux3};
    int tamSeg = sizeof(segmento) / sizeof(segmento[0]);

    // Alocacao de memoria compartilhada
    for (int i = 0; i < tamSeg; i++)
    {
        segmento[i] = shmget(IPC_PRIVATE, 9 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);
        matriz[i] = (int*)shmat(segmento[i], NULL, 0);
    }

    // Preenchimento de valores usando aritmetica de ponteiros
    for (int i = 0; i < tamSeg; i++)
    {
        for (int j = 0; j < 9; j++)
        {
            *(matriz[i] + j) = *(matAux[i] + j);
        }
        printf("Matriz %d criada:\n", i + 1);
        exibeMatriz(matriz[i], 3, 3);
        printf("\n");
    }

    // Processamento para cada linha da matriz
    for (int i = 0; i < tamSeg; i++)
    {
        if ((pid = fork()) < 0) // Erro
        {
            perror("fork");
            exit(-4);
        }
        else if (pid == 0) // Processo filho
        {
            for (int j = 0; j < 3; j++)
            {
                *(matriz[2] + 3 * i + j) = *(matriz[0] + 3 * i + j) + *(matriz[1] + 3 * i + j);
            }
            exit(EXIT_SUCCESS);
        }
        else // Processo pai
        {
            printf("Linha %d preenchida:\n", i + 1);
            waitpid(pid, &status, 0);
            exibeMatriz(matriz[2], 3, 3);
            printf("\n");
        }
    }

    // Desanexar e remover segmentos de memoria compartilhada
    for (int i = 0; i < tamSeg; i++)
    {
        shmdt(matriz[i]);
        shmctl(segmento[i], IPC_RMID, 0);
    }

    return 0;
}

void exibeMatriz(int* matriz, int lin, int col)
{
    for (int i = 0; i < lin; i++)
    {
        printf("|");
        for (int j = 0; j < col; j++)
        {
            printf(" %3d", *(matriz + i * col + j));
        }
        printf("   |\n");
    }
}


############################ EXECUCAO E COMPILACAO ###########################
* Linha de compilacao:  gcc -Wall -o ex1 ex1.c
* Linha de execucao:    ./ex1


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ SAIDA $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Matriz 1 criada:
|   5   7   9   |
|   6   3   6   |
|   3   1   2   |

Matriz 2 criada:
|   5   3   0   |
|   6   2   6   |
|   5   7   0   |

Matriz 3 criada:
|   0   0   0   |
|   0   0   0   |
|   0   0   0   |

Linha 1 preenchida:
|  10  10   9   |
|   0   0   0   |
|   0   0   0   |

Linha 2 preenchida:
|  10  10   9   |
|  12   5  12   |
|   0   0   0   |

Linha 3 preenchida:
|  10  10   9   |
|  12   5  12   |
|   8   8   2   |



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% REFLEXAO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Inicialmente, foram alocadas tres matrizes 3 x 3 linearizadas (vetores 1 x 9) na
area de memoria compartilhada por meio do comando "shmget", que retornou, para
cada chamada, um identificador de segmento. A partir dos identificadores, com o
uso de "shmat", os enderecos iniciais das matrizes foram atribuidos aos ponteiros
armazendos em "matriz". Em seguida, cada matriz foi preenchida com auxilio de
"matAux", sendo ao final exibida. Logo apos, para cada linha da matriz solucao
(a terceira), foi criado, por meio do "fork()", um processo filho responsavel por
atualizar as entradas da linha atual com a soma das entradas respectivas das outras
duas matrizes. Em todos os casos, o processo pai esperou seu filho terminar para,
enfim, exibir o estado da matriz solucao. O pai, entao, desatribuiu os ponteiros
para memoria compartilhada com "shmdt" e removeu tais segmentos com "shmctl" ao
passar a flag IPC_RMID. Por fim, foi encerrado com "return 0".

Cabe mencionar que, quando se manipularam as matrizes na regiao compartilhada, os
processos funcionaram corretamente com o uso de aritmetica de ponteiros em
detrimento de indexacao. O porque disso ainda nao nos eh sabido e, provavelmente,
envolve questoes de hardware mais minuciosas.




2) MENSAGEM DO DIA

Faça um programa que:
    * Leia uma mensagem do dia do stdin (ou arquivo).
    * Crie uma memória compartilhada com a chave 8752.
    * Salve a mensagem na memória.

* Faça um outro programa “cliente” que utilize a mesma chave (8752) e exiba a
mensagem do dia para o usuário.

******************************** CODIGO FONTE ********************************

------------------------------ EX2_SERVIDOR.C --------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>


#define SHM_KEY 8752
#define SHM_SIZE 1024 // Tamanho da memoria compartilhada

int main(void)
{
    int segmento;
    char *memoria_compartilhada;
    char mensagem[SHM_SIZE];
    
    printf("Digite a mensagem do dia: ");
    fgets(mensagem, SHM_SIZE, stdin); // Pegando a mensagem do teclado
   
    segmento = shmget(SHM_KEY, SHM_SIZE, IPC_CREAT | S_IRUSR | S_IWUSR); // Associa a memoria compartilhada ao processo
    if (segmento < 0)
    {
        perror("shmget");
        exit(1);
    }

    memoria_compartilhada = (char *)shmat(segmento, 0, 0); // Associa a memoria compartilhada ao processo
    if (memoria_compartilhada == (char *)-1)
    {                  
        perror("shmat");        
        exit(1);
    }
   
    strncpy(memoria_compartilhada, mensagem, SHM_SIZE); // Copiando a mensagem para a memoria compartilhada

    printf("Mensagem armazenada na memória compartilhada.\n");
    
    shmdt(memoria_compartilhada); // Desanexando a memoria compartilhada.

    return 0;
}


------------------------------ EX2_CLIENTE.C --------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>

#define SHM_KEY 8752
#define SHM_SIZE 1024 // Tamanho da memoria compartilhada

int main(void)
{
    int segmento;
    char *memoria_compartilhada;
 
    segmento = shmget(SHM_KEY, SHM_SIZE, S_IRUSR | S_IWUSR); // Acessando a memoria compartilhada com chave SHM_KEY
    if (segmento < 0)
    {
        perror("shmget");
        exit(1);
    }

    memoria_compartilhada = (char *)shmat(segmento, 0, 0); // Associando a memoria compartilhada ao processo
    if (memoria_compartilhada == (char *)-1)
    {
        perror("shmat");
        exit(1);
    }
   
    printf("Mensagem do dia: %s\n", memoria_compartilhada); // Exibindo a mensagem armazenada na memoria compartilhada
    
    shmdt(memoria_compartilhada); // Desanexando a memoria compartilhada

    return 0;
}


############################ EXECUCAO E COMPILACAO ###########################
* Linha de compilacao:
    gcc -Wall -o ex2_servidor ex2_servidor.c
    gcc -Wall -o ex2_cliente ex2_cliente.c
* Linha de execucao:
    ./ex2_servidor
    ./ex2_cliente


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ SAIDA $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

------------------------------ EX2_SERVIDOR.C --------------------------------
Digite a mensagem do dia: Bom dia!
Mensagem armazenada na memória compartilhada.

------------------------------ EX2_CLIENTE.C --------------------------------
Mensagem do dia: Bom dia!


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% REFLEXAO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Inicialmente, com "shmget" e "shmat", o programa servidor aloca memoria
compartilhada e a preenche com a mensagem do dia, obtida do teclado com "fgets"
e "stdin". Ao final, por meio de "shmdt", apenas desanexa tal area do processo
atual, mas nao a remove. Por isso, usando da mesma chave de acesso (8752) que o
servidor, o programa cliente consegue acessar a mesma area de memoria e exibir a
mensagem do dia nela contida.




3) BUSCA PARALELA EM VETOR

Faça um programa paralelo (com pelo menos 4 processos) para localizar uma chave
em um vetor.
* Crie uma memória compartilhada com dados numéricos inteiros e desordenados e a
divida pelo número de processos.
* Cada processo deve procurar o dado na sua área de memória e informar a posição
onde o dado foi localizado.

******************************** CODIGO FONTE ********************************
#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <unistd.h>

#define SHM_KEY 12345
#define ARRAY_SIZE 20
#define NUM_PROCESSES 4

int main(void)
{
    int segmento, pid, chave, status;
    int* vetor;
    int part_size = ARRAY_SIZE / NUM_PROCESSES, inicio, fim;
    
    segmento = shmget(SHM_KEY, ARRAY_SIZE * sizeof(int), IPC_CREAT | S_IRUSR | S_IWUSR);
    if (segmento < 0)
    {
        perror("shmget");
        exit(1);
    }

    vetor = (int *)shmat(segmento, 0, 0);
    if (vetor == (int *)-1)
    {
        perror("shmat");
        exit(1);
    }

    // Preenche o vetor com valores inteiros desordenados
    for (int i = 0; i < ARRAY_SIZE; i++)
    {
        vetor[i] = rand() % 100; // Valores aleatorios entre 0 e 99
    }

    // Exibe o vetor gerado
    printf("Vetor: ");
    for (int i = 0; i < ARRAY_SIZE; i++)
    {
        printf("%d ", vetor[i]);
    }
    printf("\n");
    
    printf("Digite a chave a ser buscada: ");
    scanf("%d", &chave);

    // Cria processos filhos
    for (int i = 0; i < NUM_PROCESSES; i++)
    {
        if ((pid = fork()) < 0)
        {
            perror("Erro na criacao do processo");
            exit(1);
        }
        else if (pid == 0) // Filho
        {
            inicio = i * part_size;
            fim = (i == NUM_PROCESSES - 1) ? ARRAY_SIZE : inicio + part_size;

            for (int j = inicio; j < fim; j++)
            {   // Busca a chave na parte designada do vetor
                if (vetor[j] == chave)
                {
                    printf("Processo %d encontrou a chave %d na posição %d\n", i, chave, j);
                    exit(EXIT_SUCCESS);
                }
            }
            
            printf("Processo %d não encontrou a chave\n", i);
            exit(EXIT_SUCCESS);
        }
    }
    
    for (int i = 0; i < NUM_PROCESSES; i++)
    {
        wait(&status);
    }

    shmdt(vetor); // Desanexa memoria do processo atual
    shmctl(segmento, IPC_RMID, 0); // Libera memoria do segmento

    return 0;
}


############################ EXECUCAO E COMPILACAO ###########################
* Linha de compilacao:  gcc -Wall -o ex3 ex3.c
* Linha de execucao:    ./ex3


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ SAIDA $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Vetor: 83 86 77 15 93 35 86 92 49 21 62 27 90 59 63 26 40 26 72 36 
Digite a chave a ser buscada: 90
Processo 0 não encontrou a chave
Processo 1 não encontrou a chave
Processo 2 encontrou a chave 90 na posição 12
Processo 3 não encontrou a chave


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% REFLEXAO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Com, respectivamente, "shmget" e "shmat", o processo pai aloca e anexa uma area
de memoria compartilhada (vetor), que sera preenchida com 20 inteiros aleatorios
em uma faixa de 0 a 99. Depois de exibir-se o vetor, obtem-se via input o valor
a ser procurado. Em seguida, o pai cria 4 processos filhos, que farao cada qual
uma busca sequencial por sua parcela de memoria a ser varrida
(isto é, 20 / 4 = 5 inteiros). Caso o encontrem, indicam a posicao em que foi
achado; do contrario, indicam nao o ter encontrado. A seguir, finalizam com
"exit". Ao final, o pai desanexa e libera a memoria compartilhada com "shmdt" e
"shmctl" (este ultimo por intermedio da flag IPC_RMID).




4) MULTIPLICACAO MULTI-Processo

Faça um programa que:

* Tenha um processo pai que abre dois blocos de memória compartilhada, m1 e m2.

* cria dois processos filho (use exec), P1 e P2: estes também fazem attach em
m1 ou m2 respectivamente.

* Cada um dá um sleep() randômico e escreve um valor int na área compartilhada
dele, e avisa o processo pai que um novo valor foi gerado, escrevendo tb um nr
de sequencia.

* O pai fica em loop verificando se houve um novo valor. Apenas quando ambos P1
e P2 geraram um novo valor, o pai imprime o produto dos valores gerados por P1
e P2.

******************************** CODIGO FONTE ********************************

--------------------------------- EX4_PAI.C -----------------------------------
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/wait.h>


#define SHM_SIZE 1024
#define KEY1 8752
#define KEY2 8753

typedef struct
{
    int value;
    int sequence;
} SharedData;

int main(void)
{
    int shmid1 = shmget(KEY1, SHM_SIZE, IPC_CREAT | 0666);
    int shmid2 = shmget(KEY2, SHM_SIZE, IPC_CREAT | 0666);
    int last_seq1 = 0, last_seq2 = 0;
    
    if (shmid1 == -1 || shmid2 == -1)
    {
        perror("shmget");
        exit(1);
    }
    
    SharedData* m1 = (SharedData*)shmat(shmid1, NULL, 0);
    SharedData* m2 = (SharedData*)shmat(shmid2, NULL, 0);
    
    if (m1 == (void*)-1 || m2 == (void*)-1) {
        perror("shmat");
        exit(1);
    }
    
    m1->sequence = 0;
    m2->sequence = 0;

    if (fork() == 0)
    {
        execl("./ex4_p1", "ex4_p1", NULL);
    }
    
    if (fork() == 0)
    {
        execl("./ex4_p2", "ex4_p2", NULL);
    }
    
    while (1)
    {
        if (m1->sequence > last_seq1 && m2->sequence > last_seq2)
        {
            printf("Produto: %d\n\n", m1->value * m2->value);
            last_seq1 = m1->sequence;
            last_seq2 = m2->sequence;
        }
        usleep(100000); // Dorme por 100ms
    }
    
    return 0;
}


-------------------------------- EX4_P1.C ---------------------------------
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>


#define SHM_SIZE 1024
#define KEY1 8752

typedef struct
{
    int value;
    int sequence;
} SharedData;

int main(void) {
    int shmid = shmget(KEY1, SHM_SIZE, 0666), sleep_time;
    if (shmid == -1)
    {
        perror("shmget");
        exit(1);
    }
    
    SharedData* m1 = (SharedData*)shmat(shmid, NULL, 0);
    if (m1 == (void*)-1) {
        perror("shmat");
        exit(1);
    }
    
    // Use uma combinação de tempo e PID para a semente
    srand(time(NULL) ^ (getpid() << 16));
    
    while (1)
    {
        sleep_time = rand() % 5 + 1;
        sleep(sleep_time);
        m1->value = rand() % 100;
        m1->sequence++;
        printf("P1 (PID %d) dormiu por %d segundos e gerou: %d\n", getpid(), sleep_time, m1->value);
    }
    
    return 0;
}


----------------------------------- EX4_P2.C -----------------------------------
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>


#define SHM_SIZE 1024
#define KEY2 8753

typedef struct
{
    int value;
    int sequence;
} SharedData;

int main(void)
{
    int shmid = shmget(KEY2, SHM_SIZE, 0666), sleep_time;
    if (shmid == -1)
    {
        perror("shmget");
        exit(1);
    }
    
    SharedData* m2 = (SharedData*)shmat(shmid, NULL, 0);
    if (m2 == (void *)-1)
    {
        perror("shmat");
        exit(1);
    }
    
    // Use uma combinação de tempo e PID para a semente
    srand(time(NULL) ^ (getpid() << 16));
    
    while (1)
    {
        sleep_time = rand() % 5 + 1;
        sleep(sleep_time);
        m2->value = rand() % 100;
        m2->sequence++;
        printf("P2 (PID %d) dormiu por %d segundos e gerou: %d\n", getpid(), sleep_time, m2->value);
    }
    
    return 0;
}


############################ EXECUCAO E COMPILACAO ###########################
* Linhas de compilacao:
    gcc -Wall -o ex4_pai ex4_pai.c
    gcc -Wall -o ex4_p1 ex4_p1.c
    gcc -Wall -o ex4_p2 ex4_p2.c
* Linha de execucao:    ./ex4_pai


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ SAIDA $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
P2 (PID 11736) dormiu por 2 segundos e gerou: 71
P1 (PID 11735) dormiu por 3 segundos e gerou: 8
Produto: 568

P1 (PID 11735) dormiu por 1 segundos e gerou: 70
P2 (PID 11736) dormiu por 4 segundos e gerou: 89
Produto: 6230


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% REFLEXAO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Inicialmente foram alocadas e anexadas duas areas de memoria, "m1" e "m2", nas
quais se armazenou a estrutura "SharedData", que armazena dois valores inteiros:
um para compor a multiplicacao, o outro para indicar qual a posicao do valor
atual na sequencia de numeros gerados. Dessa forma, depois de criar dois processos
filhos, os campos de "m1" e de "m2" passam a ser atualizados a intervalos de tempo
randomicos gracas ao uso de "sleep" associado a "rand". Simultaneamente, o pai
fica em loop verificando se os dois filhos produziram valores. Se sim, exibe o 
produto dos valores armazenados na memoria compartilhada. Em seguida, dorme por 
100 ms e itera o loop.

Cabe mencionar que este programa corresponde a um belo exemplo de coordenacao
entre multiplos processos, que se manifesta no uso da memoria compartilhada alocada
tanto pelo pai quanto por seus filhos.
