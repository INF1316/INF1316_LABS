// Pedro de Almeida Barizon 2211350

#include "raiz.h"
#include <math.h>
#include <stdio.h>

int global_aval = 0;

void gera_teste_bissecao(double a, double b, double (*f) (double x));

static double f1(double x)
{
    global_aval++;
    return x*x*x + 2.0 * x*x - 2.0;
}

static double f2(double x)
{
    global_aval++;
    return x*x*x*x + x + 1.0;
}

static double physics(double g, double m, double c, double t, double v)
{
    global_aval++;
    return ((g * m) / c) * (1 - exp(-(c*t)/m)) - v;
}

static double f3(double m)
{
    double
    g = 9.8,    // m/s^2
    c = 15.0,   // kg/s
    t = 9.0,    // s
    v = 35.0;   // m/s

    return physics(g, m, c, t, v);
}

int main(void)
{
    /* QUESTAO 2 */
    printf("------- TESTES FUNCAO F1 -------\n");
    gera_teste_bissecao(0.0, 1.0, f1);
    gera_teste_bissecao(-1.0, 2.0, f1);
    printf("\n");

    /* QUESTAO 3 */
    printf("------- TESTES FUNCAO F2 -------\n");
    gera_teste_bissecao(0.0, 1.0, f2);
    gera_teste_bissecao(-1.0, 2.0, f2);
    printf("\n");

    /* QUESTAO 4 */
    printf("------- TESTES FUNCAO F3 -------\n");
    gera_teste_bissecao(0.0, 150.0, f3);
    gera_teste_bissecao(0.0, 250.0, f3);
    printf("\n");
    
    return 0;
}

void exibe_teste(double a, double b, double raiz, int iter, int aval)
{
    if (iter == -1)
    {
        printf("[%+.2f, %+.2f]: Funcao nao convergiu | it: 0 | av: %3d\n", a, b, aval);
    }
    else
    {
        printf("[%+.2f, %+.2f]: %.9f | it: %3d | av: %3d\n", a, b, raiz, iter, aval);
    }
}

void gera_teste_bissecao(double a, double b, double (*f) (double x))
{
    double r;
    int iter = bissecao(a, b, f, &r);
    exibe_teste(a, b, r, iter, global_aval);
    global_aval = 0;
}
// Pedro de Almeida Barizon 2211350

#include "raiz.h"
#include <math.h>

#define EPSILON 5.0E-9
#define ABS_THRESH 1.0E-12

int bissecao(double a, double b, double (*f) (double x), double* r)
{
    double fa, fb, c, fc, err = (b - a) / 2.0;
    int iter = 0;

    fa = f(a);
    fb = f(b);

    if (fa * fb > 0.0)
        return -1;

    while (err > EPSILON)
    {
        iter++;
        c = (a + b) / 2.0;
        fc = f(c);

        if (fabs(fc) < ABS_THRESH)
            break;

        if (fa * fc < 0.0)
            b = c;
        else
        {
            a = c;
            fa = fc;
        }

        err = (b - a) / 2.0;
    }

    *r = (a + b) / 2.0;
    return iter;
}
// Pedro de Almeida Barizon 2211350

int bissecao(double a, double b, double (*f) (double x), double* r);
