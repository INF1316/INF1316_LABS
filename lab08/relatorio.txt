João Gabriel da Cunha Vasconcellos 2211302

1) Use o programa listaarquivo.c para imprimir o
numero de inode, o tamanho (em bytes) e a idade em
dias de cada arquivo do diretório corrente. Lembre-se
que stat() espera o path completo do arquivo


#include <stdio.h>
#include <sys/stat.h>
#include <dirent.h>
#include <time.h>
#include <string.h>

// Função para calcular a idade em dias a partir da última modificação
int calcular_idade(time_t modificacao) 
{
    time_t agora = time(NULL);  // Obtém o tempo atual
    return (agora - modificacao) / (60 * 60 * 24);  // Converte segundos para dias
}

int main() 
{
    DIR *dir;
    struct dirent *entry;
    struct stat fileStat;
    char path[1024];

    // Abrindo o diretório atual
    dir = opendir(".");
    if (dir == NULL) {
        perror("Erro ao abrir o diretório");
        return 1;
    }

    printf("Number of files = \n");

    // Percorrendo os arquivos do diretório
    while ((entry = readdir(dir)) != NULL) 
    {
        // Ignorando "." e ".."
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) 
        {
            continue;
        }

        // Construindo o caminho completo do arquivo
        snprintf(path, sizeof(path), "./%s", entry->d_name);

        // Obtendo informações do arquivo usando stat()
        if (stat(path, &fileStat) == 0) 
        {
            // Exibindo as informações do arquivo
            printf("%s    inode: %ld    size: %ld bytes    age: %d days\n", 
                   entry->d_name, fileStat.st_ino, fileStat.st_size, calcular_idade(fileStat.st_mtime));
        } else {
            perror("Erro ao obter informações do arquivo");
        }
    }

    // Fechando o diretório
    closedir(dir);

    return 0;
}

gcc -o ex1 ex1.c

./ex1

Number of files = 3
ex1    inode: 16786673    size: 17144 bytes    age: 0 days
ex1.c    inode: 16787899    size: 1522 bytes    age: 0 days
relatorio.txt    inode: 16787889    size: 0 bytes    age: 0 days


O código lido exibe informações sobre os arquivos no diretório atual 
usando as funções opendir para abrir o diretório, readdir para ler as entradas (arquivos e subdiretórios),
e stat para obter detalhes sobre cada arquivo, como número do inode, tamanho em bytes e a data da última modificação. Na saída apresentada, 
cada linha corresponde a um arquivo no diretório (como ex1, ex1.c, relatorio.txt). O número do inode é mostrado, que identifica unicamente o arquivo no sistema, 
o tamanho do arquivo em bytes, e a idade em dias, que neste caso é 0, pois o tempo desde a última modificação foi muito curto.

2)Modifique o programa anterior para mostrar o número de
links que cada arquivo possui. Depois, no diretório
corrente, execute o o comando da shell
ln <arquivo> <nomeLink> e veja o que mudou na
saída de seu programa

#include <stdio.h>
#include <sys/stat.h>
#include <dirent.h>
#include <time.h>
#include <string.h>

// Função para calcular a idade em dias a partir da última modificação
int calcular_idade(time_t modificacao) 
{
    time_t agora = time(NULL);  // Obtém o tempo atual
    return (agora - modificacao) / (60 * 60 * 24);  // Converte segundos para dias
}

int main() 
{
    DIR *dir;
    struct dirent *entry;
    struct stat fileStat;
    char path[1024];

    // Abrindo o diretório atual
    dir = opendir(".");
    if (dir == NULL) {
        perror("Erro ao abrir o diretório");
        return 1;
    }

    printf("Number of files = \n");

    // Percorrendo os arquivos do diretório
    while ((entry = readdir(dir)) != NULL) 
    {
        // Ignorando "." e ".."
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {
            continue;
        }

        // Construindo o caminho completo do arquivo
        snprintf(path, sizeof(path), "./%s", entry->d_name);

        // Obtendo informações do arquivo usando stat()
        if (stat(path, &fileStat) == 0) 
        {
            // Exibindo as informações do arquivo, incluindo o número de links
            printf("%s    inode: %ld    size: %ld bytes    age: %d days    links: %ld\n", 
                   entry->d_name, fileStat.st_ino, fileStat.st_size, calcular_idade(fileStat.st_mtime), fileStat.st_nlink);
        } else 
        {
            perror("Erro ao obter informações do arquivo");
        }
    }

    // Fechando o diretório
    closedir(dir);

    return 0;
}

gcc -o ex2 ex2.c

./ex2

Number of files = 
ex2.c    inode: 16787917    size: 1567 bytes    age: 0 days    links: 1
ex1    inode: 16786673    size: 17144 bytes    age: 0 days    links: 1
ex1.c    inode: 16787899    size: 1522 bytes    age: 0 days    links: 1
ex2    inode: 16787932    size: 17144 bytes    age: 0 days    links: 1
relatorio.txt    inode: 16787889    size: 0 bytes    age: 0 days    links: 1



Na nova saída houve a inclusão dos arquivos ex2 e ex2.c pois agora adiconei adicionei o arquivos do exercício 2 no diretório.
Além disso, agora aparecem os números de links de cada arquivo que é no mínimo 1 (O nome do arquivo).
Podem ser inclusos mais links além desse.


3)Escreva um programa que percorre recursivamente um
diretório, a partir do diretório corrente, somando o
tamanho de todos os arquivos encontrados.

#include <stdio.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>
#include <stdlib.h>

// Função recursiva para percorrer diretórios e somar os tamanhos dos arquivos
long long soma_tamanhos_diretorio(const char *dir_name) 
{
    DIR *dir;
    struct dirent *entry;
    struct stat fileStat;
    char path[1024];
    long long total_size = 0;

    // Abrindo o diretório
    dir = opendir(dir_name);
    if (dir == NULL) {
        perror("Erro ao abrir o diretório");
        return 0;
    }

    // Percorrendo as entradas do diretório
    while ((entry = readdir(dir)) != NULL) 
    {
        // Ignorando as entradas "." e ".."
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {
            continue;
        }

        // Construindo o caminho completo
        snprintf(path, sizeof(path), "%s/%s", dir_name, entry->d_name);

        // Obtendo informações do arquivo
        if (stat(path, &fileStat) == 0) 
        {
            // Verificando se é um diretório
            if (S_ISDIR(fileStat.st_mode)) 
            {
                // Se for um diretório, chamamos a função recursivamente
                total_size += soma_tamanhos_diretorio(path);
            } else {
                // Se for um arquivo, somamos o tamanho
                total_size += fileStat.st_size;
            }
        } else 
        {
            perror("Erro ao obter informações do arquivo");
        }
    }

    // Fechando o diretório
    closedir(dir);

    return total_size;
}

int main() 
{
    long long total_size;

    // Calculando o tamanho total dos arquivos no diretório atual
    total_size = soma_tamanhos_diretorio(".");

    printf("Tamanho total dos arquivos: %lld bytes\n", total_size);

    return 0;
}

gcc -o ex3 ex3.c

./ex3

Tamanho total dos arquivos: 56212 bytes

O programa percorre recursivamente um diretório e todos os seus subdiretórios, somando o tamanho de todos os arquivos encontrados. 
Ele utiliza as funções opendir e readdir para acessar as entradas dos diretórios e stat para obter o tamanho dos arquivos. 
O resultado final é o total em bytes de todos os arquivos, exibido ao final da execução.


4)Modifique o programa anterior para mostrar
recursivamente os diretórios e arquivos aninhados.
Dica: use printf(“%*s[%s]\n”,level, “”,entry->dname) para
imprimir com a identação correspondente ao nivel de
recursão

#include <stdio.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>
#include <stdlib.h>

// Função recursiva para percorrer diretórios e arquivos, imprimindo com indentação
void listar_diretorios_arquivos(const char *dir_name, int level)
 {
    DIR *dir;
    struct dirent *entry;
    struct stat fileStat;
    char path[1024];

    // Abrindo o diretório
    dir = opendir(dir_name);
    if (dir == NULL) 
    {
        perror("Erro ao abrir o diretório");
        return;
    }

    // Percorrendo as entradas do diretório
    while ((entry = readdir(dir)) != NULL)
     {
        // Ignorando "." e ".."
        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) 
        {
            continue;
        }

        // Construindo o caminho completo
        snprintf(path, sizeof(path), "%s/%s", dir_name, entry->d_name);

        // Obtendo informações do arquivo
        if (stat(path, &fileStat) == 0) 
        {
            // Imprimindo o nome com indentação
            printf("%*s[%s]\n", level * 2, "", entry->d_name);

            // Se for um diretório, chamar a função recursivamente
            if (S_ISDIR(fileStat.st_mode)) {
                listar_diretorios_arquivos(path, level + 1);
            }
        } else 
        {
            perror("Erro ao obter informações do arquivo");
        }
    }

    // Fechando o diretório
    closedir(dir);
}

int main() 
{
    // Começando a partir do diretório atual (".") e no nível de recursão 0
    listar_diretorios_arquivos(".", 0);

    return 0;
}


gcc -o ex4 ex4.c

./ex4


[ex2.c]
[ex4]
[ex1]
[ex1.c]
[ex3]
[ex4.c]
[ex3.c]
[ex2]
[relatorio.txt]


Esse programa do exercício 4 é análogo ao 3,  porém ao invés de somar o tamanho de cada arquivo,
ele apenas percorre o diretório e mostro quais arquivos estão lá hierarquicamente no terminal.



