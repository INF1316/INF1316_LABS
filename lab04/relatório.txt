[INF1316] Lab #3 - Felipe de Aragão Falcão (2120360)

João Gabriel Cunha (2211302)


 1)
 Faça um programa para criar dois processos
que se comunicam via pipe. O Pai lê do pipe
enquanto o filho escreve no pipe. Exiba o resultado
do que foi escrito e lido. 



int main() {
    int fd[2]; 
    pid_t pid;
    char mensagem[] = "Olá, Pai!";
    char buffer[100];

    
    if (pipe(fd) == -1) {
        perror("Erro ao criar o pipe");
        exit(1);
    }

    
    pid = fork();

    if (pid < 0) {
        perror("Erro no fork");
        exit(1);
    }

    if (pid > 0) {
        
        close(fd[1]); 
        read(fd[0], buffer, sizeof(buffer)); 
        printf("Pai leu: %s\n", buffer);
        close(fd[0]); 
    } else {
     
        close(fd[0]); 
        write(fd[1], mensagem, strlen(mensagem) + 1); 
        printf("Filho escreveu: %s\n", mensagem);
        close(fd[1]); 
        exit(0);
    }

    return 0;
}


gcc -o ex1 ex1.c

./ex1

Filho escreveu: Olá, Pai!
Pai leu: Olá, Pai!


O pai Lê a mensagem "Olá, pai" usando pipe e imprime na tela




2) Faça um programa para redirecionar a entrada e
a saída, lendo os dados de um arquivo e gerando
a saída em outro. 


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <sys/wait.h>  

int main() {
    int fd[2]; 

    pid_t pid;
    char buffer[1024];
    ssize_t bytesRead;

   
    if (pipe(fd) == -1) 
    {
        perror("Erro ao criar o pipe");
        exit(1);
    }

   
    pid = fork();

    if (pid < 0) 
    {
        perror("Erro no fork");
        exit(1);
    }

    if (pid > 0) 
    {
        
        close(fd[0]); 

        
        int inputFile = open("entrada.txt", O_RDONLY);
        if (inputFile < 0) 
        {
            perror("Erro ao abrir o arquivo de entrada");
            exit(1);
        }

        
        while ((bytesRead = read(inputFile, buffer, sizeof(buffer))) > 0) 
        {
            if (write(fd[1], buffer, bytesRead) != bytesRead) 
            {
                perror("Erro ao escrever no pipe");
                close(inputFile);
                close(fd[1]);
                exit(1);
            }
        }

       
        close(inputFile);
        close(fd[1]);

        
        wait(NULL);
    } else 
    {
        
        close(fd[1]); 
       
        int outputFile = open("saida.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
        if (outputFile < 0) 
        {
            perror("Erro ao abrir o arquivo de saída");
            exit(1);
        }

       
        while ((bytesRead = read(fd[0], buffer, sizeof(buffer))) > 0)
         {
            if (write(outputFile, buffer, bytesRead) != bytesRead)
             {
                perror("Erro ao escrever no arquivo de saída");
                close(outputFile);
                close(fd[0]);
                exit(1);
            }
        }

       
        close(outputFile);
        close(fd[0]);

        exit(0);
    }

    return 0;
}


gcc -o ex2 ex2.c

./ex2

(Não saiu nada no terminal)

No programa usamos a comunicação através de pipes para ler o arquivo texto em que está escrito (e^jpi -1 = 0) e escrever em outro arquivo.




3) Faça um programa para criar um pipe e
executar dois processos que são utilitários do Unix
que se comuniquem através do pipe criado, assim
como a shell faz. Exemplo:


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() 
{
    int fd[2];
    pipe(fd);
    pid_t pid1 = fork();

    if (pid1 == 0) 
    {
        dup2(fd[1], STDOUT_FILENO);
        close(fd[0]);
        close(fd[1]);
        execlp("ps", "ps", NULL);
    }

    pid_t pid2 = fork();
    if (pid2 == 0)
     {
        dup2(fd[0], STDIN_FILENO);
        close(fd[1]);
        close(fd[0]);
        execlp("wc", "wc", NULL);
    }

    close(fd[0]);
    close(fd[1]);
    wait(NULL);
    wait(NULL);

    return 0;
}

gcc -o ex3 ex3.c        

./ex3


   5      20     150


Aqui está o código solicitado para o problema:

```c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    int fd[2];
    pipe(fd);
    pid_t pid1 = fork();

    if (pid1 == 0) {
        dup2(fd[1], STDOUT_FILENO);
        close(fd[0]);
        close(fd[1]);
        execlp("ps", "ps", NULL);
    }

    pid_t pid2 = fork();
    if (pid2 == 0) {
        dup2(fd[0], STDIN_FILENO);
        close(fd[1]);
        close(fd[0]);
        execlp("wc", "wc", NULL);
    }

    close(fd[0]);
    close(fd[1]);
    wait(NULL);
    wait(NULL);

    return 0;
}
```
O código cria um pipe e usa `fork()` para gerar dois processos filhos. 
O primeiro processo executa o comando `ps`, e o segundo processo executa o comando `wc`, comunicando-se via pipe. 
O programa utiliza `dup2()` para redirecionar a saída do primeiro processo para o pipe e a entrada do segundo processo para 
ler do pipe, replicando a funcionalidade de `ps | wc` como seria feito em um shell.


4) Faça um programa que cria dois processos
leitores e um processo escritor em uma mesma
pipe. Faça o escritor dormir metade do tempo
dos leitores, e mostre como os leitores
consomem os dados produzidos pelo escritor. 



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main()
 {
    int fd[2];
    pipe(fd);

    pid_t writer, reader1, reader2;

    writer = fork();
    if (writer == 0) 
    {
        close(fd[0]);
        for (int i = 1; i <= 5; i++) {
            char msg[20];
            sprintf(msg, "Mensagem %d\n", i);
            write(fd[1], msg, sizeof(msg));
            printf("Escritor escreveu: %s", msg);
            sleep(2);  // Escritor dorme 2 segundos
        }
        close(fd[1]);
        exit(0);
    }

    reader1 = fork();
    if (reader1 == 0) 
    {
        close(fd[1]);
        char buffer[100];
        while (read(fd[0], buffer, sizeof(buffer)) > 0)
         {
            printf("Leitor 1 leu: %s", buffer);
            sleep(1);  
        }
        close(fd[0]);
        exit(0);
    }

    reader2 = fork();
    if (reader2 == 0)
     {
        close(fd[1]);
        char buffer[100];
        while (read(fd[0], buffer, sizeof(buffer)) > 0) {
            printf("Leitor 2 leu: %s", buffer);
            sleep(1);  
        }
        close(fd[0]);
        exit(0);
    }

    close(fd[0]);
    close(fd[1]);
    wait(NULL);
    wait(NULL);
    wait(NULL);

    return 0;
}



gcc -o ex4 ex4.c        

./ex3


Escritor escreveu: Mensagem 1
Leitor 1 leu: Mensagem 1
Escritor escreveu: Mensagem 2
Leitor 2 leu: Mensagem 2
Escritor escreveu: Mensagem 3
Leitor 1 leu: Mensagem 3
Escritor escreveu: Mensagem 4
Leitor 2 leu: Mensagem 4
Escritor escreveu: Mensagem 5
Leitor 1 leu: Mensagem 5


Aqui está o código para o problema solicitado:

```c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() 
{
    int fd[2];
    pipe(fd);
    pid_t writer, reader1, reader2;

    writer = fork();
    if (writer == 0)
     {
        close(fd[0]);
        for (int i = 1; i <= 5; i++) 
        {
            char msg[20];
            sprintf(msg, "Mensagem %d\n", i);
            write(fd[1], msg, sizeof(msg));
            printf("Escritor escreveu: %s", msg);
            sleep(2);  // Escritor dorme 2 segundos
        }
        close(fd[1]);
        exit(0);
    }

    reader1 = fork();
    if (reader1 == 0) {
        close(fd[1]);
        char buffer[100];
        while (read(fd[0], buffer, sizeof(buffer)) > 0) {
            printf("Leitor 1 leu: %s", buffer);
            sleep(1);  // Leitor 1 dorme 1 segundo
        }
        close(fd[0]);
        exit(0);
    }

    reader2 = fork();
    if (reader2 == 0) {
        close(fd[1]);
        char buffer[100];
        while (read(fd[0], buffer, sizeof(buffer)) > 0) {
            printf("Leitor 2 leu: %s", buffer);
            sleep(1);  // Leitor 2 dorme 1 segundo
        }
        close(fd[0]);
        exit(0);
    }

    close(fd[0]);
    close(fd[1]);
    wait(NULL);
    wait(NULL);
    wait(NULL);

    return 0;
}
```

### Conclusão:
Este código cria um processo escritor e dois processos leitores que compartilham o mesmo pipe. 
O escritor escreve mensagens no pipe a cada 2 segundos, enquanto os leitores consomem os dados do pipe, cada um dormindo por 1 segundo após ler. 
O comportamento de sincronização é demonstrado pelo fato de que o escritor dorme por mais tempo que os leitores, 
permitindo que os dados sejam lidos logo após serem escritos, mas com os leitores em funcionamento assíncrono.






