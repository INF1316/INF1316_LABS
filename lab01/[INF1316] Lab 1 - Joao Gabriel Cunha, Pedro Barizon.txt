### ALUNOS
Pedro Barizon       2211350
João Gabriel Cunha  2211302

# LABORATORIO 2 - Sistemas Operacionais

1) Faça um programa para somar matrizes de acordo com o seguinte algoritmo:

    * O primeiro processo irá criar duas matrizes preenchidas e uma terceira
    vazia em 3 áreas de memória compartilhada.
    
    * Para cada linha da matriz solução, o seu programa deverá gerar um processo
    para o seu cálculo.

******************************** CODIGO FONTE ********************************
#include <unistd.h>     // fork, exec
#include <sys/wait.h>   // waitpid
#include <stdio.h>
#include <stdlib.h>     // exit e NULL

int main(void) 
{
    int pid, status;

    pid = getpid();
    printf("pid do pai: %d\n", pid);

    if (fork() != 0) // Pai
    {
        waitpid(-1, &status, 0);
    }

    else // Filho
    {
        pid = getpid();
        printf("pid do filho: %d\n", pid);
        exit(EXIT_SUCCESS);
    }

    return 0;
}


############################ EXECUCAO E COMPILACAO ###########################
* Linha de compilacao:  gcc -Wall -o ex1 ex1.c
* Linha de execucao:    ./ex1


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ SAIDA $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
pid do pai: 3755
pid do filho: 3756


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% REFLEXAO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Inicialmente, por meio da execucao de getpid(), obtem-se o pid do processo pai, 
exibido na console com printf. Em seguida, a execucao de fork() demarca o
surgimento do processo filho. No filho, fork() retorna 0; no pai, fork() retorna
o pid do filho, um valor nao nulo. Isso permitiu variar os comandos em cada
processo por meio de controle condicional. O filho, entao, exibe seu pid e
finaliza com exit. O pai, que aguardava o filho com waitpid, retoma sua execucao,
retornando 0 ao final.




2) Agora, usando a mesma estrutura de processos pai e filho, declare uma
variável visível ao pai e ao filho, no pai inicialize a variável com1 e imprima
seu valor antes do fork(). No filho, altere o valor da variável para 5 e imprima
o seu valor antes do exit(). Agora, no pai, imprima novamente o valor da
variável após o filho ter alterado a variável - após a waitpid(). Justifique os
resultado obtidos.

******************************** CODIGO FONTE ********************************
#include <unistd.h>     // fork, exec
#include <sys/wait.h>   // waitpid
#include <stdio.h>
#include <stdlib.h>     // exit e NULL

int main(void)
{
    int status, var;
    /*
    int* var = (int*)malloc(sizeof(int)); NUNCA MAIS FAZER (wild pointer)

    if (!var)
        exit(EXIT_FAILURE); // Impossivel alocar memoria
    */

    if (fork() != 0) // Pai
    {
        var = 1;
        printf("valor de var no pai antes do filho: %d\n", var);

        waitpid(-1, &status, 0);

        printf("valor de var no pai depois do filho: %d\n", var);
        // free(var);
    }

    else // Filho
    {
        var = 5;
        printf("valor de var no filho: %d\n", var);
        exit(EXIT_SUCCESS);
    }

    return 0;
}


############################ EXECUCAO E COMPILACAO ###########################
* Linha de compilacao:  gcc -Wall -o ex2 ex2.c
* Linha de execucao:    ./ex2


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ SAIDA $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Valor de var no pai antes do filho: 1
Valor de var no filho: 5
Valor de var no pai depois do filho: 1


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% REFLEXAO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
O valor de var nao foi o mesmo nos dois programas, mesmo depois do retorno do
filho ao pai. Isso se explica pelo fato de que os codigos e as variaveis dos
programas respectivos aos processos foram  armazenados em areas diferentes na
RAM. Dessa forma, nao houve compartilhamento de variaveis, ainda que estas
pudessem ter sido alocadas dinamicamente.




3) Use o programa anterior para ler e ordenar um vetor de 10 posições. O filho
ordena o vetor e o pai exibe os dados do vetor antes do fork() e depois do
waitpid(). Eles usarão o mesmo vetor na memória? Justifique.

******************************** CODIGO FONTE ********************************
#include <unistd.h>     // fork, exec
#include <sys/wait.h>   // waitpid
#include <stdio.h>
#include <stdlib.h>     // exit e NULL

void exibeVetor(int* v, int n);
void exibeVetorLn(int* v, int n);
void ordenaVetor(int* v, int n);

int main(void)
{
    int v[10], tam = sizeof(v) / sizeof(v[0]), status;

    printf("digite 10 valores inteiros:\n");

    for (int i = 0; i < tam; i++)
        fscanf(stdin, " %d", v + i);
    
    printf("antes do fork:\n");
    exibeVetorLn(v, tam);

    if (fork() != 0) // Pai
    {
        waitpid(-1, &status, 0);
        printf("depois do fork:\n");
        exibeVetorLn(v, tam);
    }

    else // Filho
    {
        ordenaVetor(v, tam);
        printf("vetor ordenado pelo filho:\n");
        exibeVetorLn(v, tam);
        exit(EXIT_SUCCESS);
    }
    
    return 0;
}

void exibeVetorLn(int* v, int n)
{
    exibeVetor(v, n);
    printf("\n");
}


void exibeVetor(int* v, int n)
{
    FILE* file = stdout;

    fprintf(file, "{ %d", v[0]);

    for (int i = 1; i < n; i++)
        fprintf(file, ", %d", v[i]);

    fprintf(file, " }");
}

void ordenaVetor(int* v, int n)
{
    int menor, aux;

    for (int i = 0; i < n; i++)
    {
        menor = i;

        for (int j = i + 1; j < n; j++)
        {
            if (v[j] < v[menor])
                menor = j;
        }

        aux = v[i];
        v[i] = v[menor];
        v[menor] = aux;
    }
}


############################ EXECUCAO E COMPILACAO ###########################
* Linha de compilacao:  gcc -Wall -o ex3 ex3.c
* Linha de execucao:    ./ex3


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ SAIDA $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
digite 10 valores inteiros:
10
1
1
1
1
13
32123
23
1
123
antes do fork:
{ 10, 1, 1, 1, 1, 13, 32123, 23, 1, 123 }
vetor ordenado pelo filho:
{ 1, 1, 1, 1, 1, 10, 13, 23, 123, 32123 }
depois do fork:
{ 10, 1, 1, 1, 1, 13, 32123, 23, 1, 123 }


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% REFLEXAO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Foram exibidos dois vetores iguais, pois a ordenacao feita pelo filho nao surtiu
efeito no pai, uma vez que, como visto no exercicio anterior, os processos
lidaram com areas de memoria distintas e, portanto, vetores diferentes.




4) Modifique o programa anterior para que o filho execute um programa elaborado
por você, que mande imprimir uma mensagem qualquer no vídeo, por exemplo,
“alo mundo”. Em seguida altere o programa do item 4 para o filho executar o
programa echo da shell.

******************************** CODIGO FONTE ********************************

----------------------------------- EX4.C ------------------------------------
#include <unistd.h>     // fork, exec
#include <sys/wait.h>   // waitpid
#include <stdio.h>
#include <stdlib.h>     // exit e NULL

// Referencia https://users.pja.edu.pl/~jms/qnx/help/watcom/clibref/src/exec.html

int main(void)
{
    int status;
    const char* fileName = "echo";
    char *argv[6] = 
    {
        fileName,
        "voce consegue ouvir o ECHO?",
        "ECHO ECHO",
        "ECHO ECHO ECHO",
        "ECHO ECHO",
        "ECHO"
    };

    if (fork() != 0) // Pai
    {
        waitpid(-1, &status, 0);
        puts("fim do processo pai");
    }

    else // Filho
    {
        printf("processo filho antes do exec\n");
        // execv("alo_mundo.exe", argv);        // Exibe "alo mundo" na tela
        execv("echo", argv);                    // Replica as mensagens de argv na shell
    }

    return 0;
}


-------------------------------- ALO_MUNDO.C ---------------------------------
#include <stdio.h>
#include <stdlib.h>

int main(void)
{
    puts("alo mundo");
    
    exit(EXIT_SUCCESS); // NAO FUNCIONOU SO COM RETURN
}


------------------------------------ ECHO.C -----------------------------------
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    for (int i = 0; i < argc; i++)
    {
        fprintf(stdout, "argv[%d]: %s\n", i, argv[i]);
    }

    exit(EXIT_SUCCESS);
}


############################ EXECUCAO E COMPILACAO ###########################
* Linhas de compilacao:
    gcc -Wall -o alo_mundo.exe alo_mundo.c
    gcc -Wall -o echo.exe echo.c
    gcc -Wall -o ex4 ex4.c
* Linha de execucao:    ./ex4


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% REFLEXAO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
O comando execv sobrescreve a area da RAM com o codigo herdado pelo filho, pondo
no lugar o codigo do programa cujo caminho foi passado como primeiro argumento
(no caso, "echo.exe"). Em seguida, argv corresponde a lista de argumentos que
serao passados ao programa, a semelhanca de quando se escrevem os argumentos em
uma console. O caso do programa alo_mundo.exe eh inteiramente analogo.
